name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  front-end:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install back-office dependencies
        working-directory: back-office
        run: npm install

      - name: Build back-office
        working-directory: back-office
        run: npm run build

      - name: Run front-end tests
        working-directory: back-office
        run: npm run test

  back-end:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        working-directory: Back-end
        run: pip install -r requirements.txt

      - name: Run back-end tests
        working-directory: Back-end
        run: python main.py test
          
  integration-test:
    runs-on: ubuntu-latest
    needs: [front-end, back-end]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' 

      - name: Install dependencies
        working-directory: Back-end
        run: pip install -r requirements.txt  

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start MySQL service
        run: |
          docker-compose -f docker-compose.yml up -d db
          # Attendre que MySQL soit prêt
          sleep 10  # Ajustez le temps si nécessaire

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if docker-compose exec db mysqladmin ping -h "localhost" --silent; then
              echo "MySQL is ready !"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done

      - name: Validate docker-compose.yml
        run: |
          docker-compose -f docker-compose.yml config
          
      - name: Start components
        run: docker-compose -f docker-compose.yml up -d

  build-image:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
  
    strategy:
      matrix:
        component: ["front-end", "back-end"]
      
    permissions:
        contents: read
        packages: write
      
    steps:
        - uses: actions/checkout@v3
  
        - name: Log in to registry
          run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  
        - name: Build the Docker image
          uses: docker/build-push-action@v2
          with:
            context: ${{ matrix.component }} 
            file: ${{ matrix.component }}/Dockerfile
            push: true
            tags: ghcr.io/${{ github.repository_owner }}/my-app-${{ matrix.component }}:${{ github.sha }} 
